@inject IRepositorio repositorio
@inject NavigationManager navigationManager
<h3>Agregar Persona</h3>
<EditForm Model="personaUsuario"  OnSubmit="@Crear">
 
        <div class="form-group">
        <label>Nombres</label>
        <InputText class="form-control" @bind-Value="@personaUsuario.Nombres"></InputText>
        
    </div>
        <div class="form-group">
        <label>Apellidos</label>
        <InputText class="form-control" @bind-Value="@personaUsuario.Apellidos"></InputText>
 
    </div>
        <div class="form-group">
        <label>Tipo de identificacion</label>
        <InputSelect class="form-control" @bind-Value="@personaUsuario.TipoIdentificacion">
             <option value="sin">Seleccione un estado</option>
            <option value="Cedula">Cedula</option>
            <option value="Pasaporte">Pasaporte</option>
            <option value="Tarjeta de identidad">Tarjeta de identidad</option>

        </InputSelect>
       
    </div>
        <div class="form-group">
        <label>Numero de identificacion</label>
        <InputText class="form-control" @bind-Value="@personaUsuario.NumeroIdentificacion"></InputText>
        <ValidationMessage For="@(() => personaUsuario.NumeroIdentificacion)"/>
    </div>
        <div class="form-group">
        <label>Email</label>
        <InputText class="form-control" @bind-Value="@personaUsuario.Email"></InputText>
    </div>
        <div class="form-group">
        <label>Fecha creación</label>
        <InputDate class="form-control" @bind-Value="@personaUsuario.FechaCreacion"></InputDate>
    </div>
    <div class="form-group">
        <label>Usuario</label>
        <InputText class="form-control" @bind-Value="@personaUsuario.User"></InputText>
        <ValidationMessage For="@(() => personaUsuario.User)"/>
    </div>
        <div class="form-group">
        <label>Password</label>
        <InputText class="form-control" @bind-Value="@personaUsuario.Pass"></InputText>
        <ValidationMessage For="@(() => personaUsuario.Pass)"/>
    </div>
    <button type="submit" class="btn btn-dark">Guardar</button>

   @if(persona != null)
    {
        @if(isError)
        {
            <div class="alert alert-info mt-3" role="alert">
                <p>Ha ocurrido un error</p>
            </div>
        }
        else
        {
            <div class="alert alert-warning mt-3" role="alert">
                <p>Registro guardado.</p>
            </div>
        }
    }


        

</EditForm>

@code {
    private PersonaUsuarioDto personaUsuario = new PersonaUsuarioDto();
    private PersonaDto persona;
    private UsuarioDto usuario;
    private bool isError = false;


    private async Task Crear()
    {
        persona = AddPersona(personaUsuario);
        usuario = AddUsuario(personaUsuario);
        var responsePersona = await repositorio.Post<PersonaDto>("https://localhost:7044/Persona", persona);
        var responseUsuario = await repositorio.Post<UsuarioDto>("https://localhost:7044/Usuario", usuario);

        if (responsePersona.Error || responseUsuario.Error)
        {   
            isError = true;
        }
        else
        {
            isError = false;
        }
        Console.WriteLine("OK");
        
    }

    private PersonaDto AddPersona(PersonaUsuarioDto personaUsuario)
    {
        return new PersonaDto()
        {
            Identificador = 0,
            Nombres = personaUsuario.Nombres,
            Apellidos = personaUsuario.Apellidos,
            NumeroIdentificacion = personaUsuario.NumeroIdentificacion,
            Email = personaUsuario.Email,
            TipoIdentificacion = personaUsuario.TipoIdentificacion,
            FechaCreacion = personaUsuario.FechaCreacion

         };
    }
    private UsuarioDto AddUsuario(PersonaUsuarioDto personaUsuario)
    {
        return new UsuarioDto()
        {
            Identificador = 0,
            User = personaUsuario.User,
            Pass = personaUsuario.Pass,
            FechaCreacion = personaUsuario.FechaCreacion

         };
    }
}